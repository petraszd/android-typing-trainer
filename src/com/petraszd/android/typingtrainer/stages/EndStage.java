package com.petraszd.android.typingtrainer.stages;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.scenes.scene2d.Group;
import com.petraszd.android.typingtrainer.Rules;
import com.petraszd.android.typingtrainer.actors.RecordBuble;
import com.petraszd.android.typingtrainer.token.RecordManager;
import com.petraszd.android.typingtrainer.token.Token;

public class EndStage extends InformationStage {
	
	protected boolean mIsFirstTime;
	protected boolean mIsRecord;	
	
	protected int mCurrentRecord;
	protected Group mRecordBubles = null;

	public EndStage(Token token) {
		super(token);

		RecordManager rMgr = new RecordManager();
		mIsFirstTime = !rMgr.containsBestScore();
		mIsRecord = rMgr.putBestScore(mToken.getPointManager().getPoints());
		if (mIsRecord) {
			initRecordBubles();
		}
		mCurrentRecord = rMgr.getBestScore();
	}
	
	@Override
	public void onBack() {
		toNextStage(StartStage.class);
	}
	
	@Override
	public boolean touchUp(int x, int y, int pointer, int button) {
		toNextStage(PlayableStage.class);
		return true;
	}
	
	@Override
	protected void afterDraw(SpriteBatch batch) {
		if (!mIsFirstTime && mIsRecord) {
			mBubles.draw(batch, 1.0f);
		}
	}
	
	@Override
	protected String getMessageString() {
		return "Tap anywhere to restart";
	}
	
	@Override
	protected String getHeaderString() {
		return String.format("%d", mToken.getPointManager().getPoints());
	}

	@Override
	protected void customDraw(SpriteBatch batch, float w, float h, float x, float y) {

		
		float yStart = h - Rules.FONT_SIZE_BIG * 2.0f;
		drawKeyValue(batch, "Record", "" + mCurrentRecord, mSlimFont, yStart);
		drawKeyValue(batch, "Accuracy", mToken.getStatistics().getAccuracyStr(), mSlimFont, yStart - Rules.FONT_SIZE);		
		drawKeyValue(batch, "Key stokes", "" + mToken.getStatistics().getTotal(), mSlimFont,  yStart - Rules.FONT_SIZE * 2.0f);
		drawKeyValue(batch, "Misses", "" + mToken.getStatistics().getBad(), mSlimFont,  yStart - Rules.FONT_SIZE * 3.0f);
		drawKeyValue(batch, "Time", "" + mToken.getMeasurer(), mSlimFont, yStart - Rules.FONT_SIZE * 4.0f);
	}
	
	protected void initRecordBubles() {
		mRecordBubles = new Group("record-bubles");
		addActor(mRecordBubles);
		
		float positions[] = new float[] {
			0.0053097351614f, 0.132743361514f,
			0.0035398228569f, 0.109734517324f,
			0.00176991230451f, 0.0867256556136f,
			0.00176991230451f, 0.061946904376f,
			0.00176991230451f, 0.0424778742827f,
			0.0f, 0.0212389371414f,
			0.0035398228569f, 0.0f,
			0.0247787617504f, 0.106194685707f,
			0.0318584074642f, 0.0884955626618f,
			0.047787607692f, 0.0672566255204f,
			0.056637160454f, 0.0477876129484f,
			0.0707964694028f, 0.0300884899033f,
			0.0796460221647f, 0.0141592914276f,
			0.0902654819748f, 0.0389380426652f,
			0.0867256678785f, 0.061946904376f,
			0.0849557608304f, 0.0778761028517f,
			0.0849557608304f, 0.0778761028517f,
			0.0867256678785f, 0.0973451329449f,
			0.0884955749266f, 0.116814163038f,
			0.0884955749266f, 0.134513268562f,
			0.192920353585f, 0.0159291984757f,
			0.180530969206f, 0.0123893668582f,
			0.16460177073f, 0.0106194598101f,
			0.146902647685f, 0.0176991055239f,
			0.130973449209f, 0.0513274270447f,
			0.139823001971f, 0.0389380426652f,
			0.173451323492f, 0.0566371657103f,
			0.146902647685f, 0.0566371657103f,
			0.196460185203f, 0.0513274270447f,
			0.194690260633f, 0.0725663641861f,
			0.185840707872f, 0.0938053013274f,
			0.169911509396f, 0.100884947041f,
			0.15398231092f, 0.0973451329449f,
			0.134513280827f, 0.081415916948f,
			0.230088489202f, 0.0920353942793f,
			0.23362832082f, 0.0778761028517f,
			0.244247798151f, 0.0407079672346f,
			0.235398227868f, 0.0566371657103f,
			0.253097350913f, 0.0159291984757f,
			0.263716810723f, 0.0407079672346f,
			0.270796456437f, 0.0566371657103f,
			0.277876102151f, 0.0761061958036f,
			0.284955747865f, 0.0920353942793f,
			0.293805318148f, 0.0725663641861f,
			0.300884963862f, 0.0477876129484f,
			0.309734516624f, 0.026548675807f,
			0.323893808051f, 0.0159291984757f,
			0.327433622147f, 0.0371681356171f,
			0.334513267861f, 0.0566371657103f,
			0.336283192431f, 0.0778761028517f,
			0.343362838144f, 0.0955752083756f,
			0.433628325375f, 0.026548675807f,
			0.435398232424f, 0.0141592914276f,
			0.431858418327f, 0.0513274270447f,
			0.435398232424f, 0.0690265500898f,
			0.456637169565f, 0.0672566255204f,
			0.47433629261f, 0.0672566255204f,
			0.495575229751f, 0.0778761028517f,
			0.506194689562f, 0.0973451329449f,
			0.500884950896f, 0.120353977134f,
			0.48495575242f, 0.1256637158f,
			0.461946908231f, 0.129203529896f,
			0.438938064041f, 0.129203529896f,
			0.437168139472f, 0.106194685707f,
			0.433628325375f, 0.0902654872311f,
			0.492035398134f, 0.0601769798066f,
			0.506194689562f, 0.0424778742827f,
			0.504424782513f, 0.00353981409628f,
			0.50796459661f, 0.026548675807f,
			0.520353980989f, 0.00530972114442f,
			0.61061946822f, 0.0159291984757f,
			0.594690269745f, 0.0106194598101f,
			0.568141593938f, 0.0176991055239f,
			0.557522134127f, 0.0336283215208f,
			0.552212395462f, 0.0495575199965f,
			0.568141593938f, 0.0548672586622f,
			0.582300885365f, 0.0548672586622f,
			0.601769915458f, 0.0566371657103f,
			0.614159299838f, 0.0601769798066f,
			0.61238939279f, 0.0778761028517f,
			0.601769915458f, 0.0902654872311f,
			0.587610624031f, 0.0973451329449f,
			0.564601779841f, 0.0938053013274f,
			0.552212395462f, 0.0796460098998f,
			0.552212395462f, 0.061946904376f,
			0.711504432783f, 0.0318583969514f,
			0.702654880021f, 0.0212389371414f,
			0.684955756976f, 0.0141592914276f,
			0.663716819834f, 0.0176991055239f,
			0.646017696789f, 0.0371681356171f,
			0.649557528407f, 0.0530973340928f,
			0.656637174121f, 0.0707964571379f,
			0.656637174121f, 0.081415916948f,
			0.665486726882f, 0.0938053013274f,
			0.684955756976f, 0.0973451329449f,
			0.697345141355f, 0.0955752083756f,
			0.713274339831f, 0.0867256556136f,
			0.762831859827f, 0.026548675807f,
			0.753982307065f, 0.0389380426652f,
			0.752212400017f, 0.0584070727585f,
			0.753982307065f, 0.0707964571379f,
			0.764601766876f, 0.0884955626618f,
			0.780530982872f, 0.0973451329449f,
			0.798230088396f, 0.0973451329449f,
			0.812389379824f, 0.0867256556136f,
			0.815929211441f, 0.0707964571379f,
			0.81769911849f, 0.0530973340928f,
			0.819469025538f, 0.0300884899033f,
			0.80530973411f, 0.0123893668582f,
			0.7946902743f, 0.0141592914276f,
			0.773451337159f, 0.0123893668582f,
			0.865486731438f, 0.0991150399931f,
			0.865486731438f, 0.0831858415174f,
			0.86371682439f, 0.0690265500898f,
			0.865486731438f, 0.0477876129484f,
			0.86371682439f, 0.0247787512377f,
			0.86194689982f, 0.0123893668582f,
			0.883185836962f, 0.0867256556136f,
			0.899115052959f, 0.0991150399931f,
			0.927433635814f, 0.0761061958036f,
			0.938053095624f, 0.0884955626618f,
			0.948672572955f, 0.0938053013274f,
			0.980530987428f, 0.0902654872311f,
			0.987610633142f, 0.0761061958036f,
			0.992920354286f, 0.0530973340928f,
			0.992920354286f, 0.0212389371414f,
			0.992920354286f, 0.00176990704814f,
			0.975221248762f, 0.0141592914276f,
			0.94336283429f, 0.0159291984757f,
			0.93097344991f, 0.0300884899033f,
			0.922123897148f, 0.0495575199965f,
			0.934513281528f, 0.0672566255204f,
			0.964601771431f, 0.0849557485655f,
			0.957522125717f, 0.00707964571379f,
			0.992920354286f, 0.139823007228f,
			0.994690278856f, 0.120353977134f,
			0.996460185904f, 0.081415916948f,
			1.0f, 0.102654854089f,
		};
		
		float maxy = 0.0f;
		for (int i = 1; i < positions.length; i += 2) {
			if (positions[i] > maxy) {
				maxy = positions[i];
			}
		}

		float factor = Gdx.graphics.getWidth() * 0.8f;
		float delta = Gdx.graphics.getWidth() * 0.1f;
		for (int i = 0; i < positions.length; i += 2) {
			float x = positions[i] * factor + delta;
			float y = (positions[i + 1] - maxy) * factor;
			mBubles.addActor(new RecordBuble(x, y));
		}
	}
}
